@using LocalServicesDirectory.Web.Services
@inject ServiceApiClient Api

@if (Visible)
{
    <div class="card p-3 mb-3">
        <h5>@(ItemId is null ? "Nuevo Servicio" : "Editar Servicio")</h5>

        <div class="row g-2">
            <div class="col-md-6">
                <label class="form-label">Nombre</label>
                <input class="form-control" @bind="model.Name" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Teléfono</label>
                <input class="form-control" @bind="model.Phone" />
            </div>

            <div class="col-12">
                <label class="form-label">Descripción</label>
                <textarea class="form-control" rows="3" @bind="model.Description"></textarea>
            </div>

            <div class="col-md-6">
                <label class="form-label">Email</label>
                <input class="form-control" @bind="model.Email" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Dirección</label>
                <input class="form-control" @bind="model.Address" />
            </div>

            <div class="col-md-6">
                <label class="form-label">Categoría</label>
                <select class="form-select" @bind="model.CategoryId">
                    @foreach (var c in categories)
                    {
                        <option value="@c.Id">@c.Name</option>
                    }
                </select>
            </div>
            <div class="col-md-6">
                <label class="form-label">Ciudad</label>
                <select class="form-select" @bind="model.CityId">
                    @foreach (var c in cities)
                    {
                        <option value="@c.Id">@c.Name</option>
                    }
                </select>
            </div>

            <div class="col-md-6">
                <label class="form-label">Latitud</label>
                <input type="number" step="0.000001" class="form-control" @bind="model.Latitude" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Longitud</label>
                <input type="number" step="0.000001" class="form-control" @bind="model.Longitude" />
            </div>

            <div class="col-md-6">
                <label class="form-label">Website</label>
                <input class="form-control" @bind="model.WebsiteUrl" />
            </div>
            <div class="col-md-6 form-check mt-4 ms-2">
                <input class="form-check-input" type="checkbox" id="chk" @bind="model.IsVerified" />
                <label class="form-check-label" for="chk">Verificado</label>
            </div>
        </div>

        <div class="mt-3">
            <button class="btn btn-primary" @onclick="Save">Guardar</button>
            <button class="btn btn-secondary ms-2" @onclick="() => OnClose.InvokeAsync(false)">Cancelar</button>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public Guid? ItemId { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }

    ServiceApiClient.CreateOrUpdateServiceDto model = new();
    List<ServiceApiClient.CategoryDto> categories = new();
    List<ServiceApiClient.CityDto> cities = new();

    protected override async Task OnParametersSetAsync()
    {
        categories = await Api.GetCategoriesAsync();
        cities = await Api.GetCitiesAsync();

        if (ItemId.HasValue)
        {
            var s = await Api.GetAsync(ItemId.Value);
            if (s is not null)
            {
                model = new ServiceApiClient.CreateOrUpdateServiceDto
                {
                    Name = s.Name,
                    Description = s.Description,
                    Phone = s.Phone,
                    Email = s.Email,
                    Address = s.Address,
                    CategoryId = s.CategoryId,
                    CityId = s.CityId,
                    Latitude = s.Latitude,
                    Longitude = s.Longitude,
                    WebsiteUrl = s.WebsiteUrl,
                    IsVerified = s.IsVerified
                };
            }
        }
        else
        {
            model = new ServiceApiClient.CreateOrUpdateServiceDto();
            if (categories.Count > 0) model.CategoryId = categories[0].Id;
            if (cities.Count > 0) model.CityId = cities[0].Id;
        }
    }

    async Task Save()
    {
        bool ok = ItemId.HasValue
            ? await Api.UpdateAsync(ItemId.Value, model)
            : (await Api.CreateAsync(model)) is Guid;

        await OnClose.InvokeAsync(ok);
    }
}

